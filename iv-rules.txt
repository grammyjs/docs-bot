~version: "2.1"
~allowed_origin: "https://grammy.dev"

# Define paths structures
?path: /((id|es|zh|uk)/)?guide/.*
?path: /((id|es|zh|uk)/)?advanced/.*
?path: /((id|es|zh|uk)/)?plugins/.*
?path: /((id|es|zh|uk)/)?resources/.*
?path: /((id|es|zh|uk)/)?hosting/.*

# Title is always the only h1 element
@replace("#", ""): //h1
title:  //h1
site_name: "grammY Docs"
channel: "@grammyjs_news"

# Simply picking up main does most of the work
body: //div[has-class("content-container")]
# Just gotta fix some spacing in code blocks ...
@replace("\n$", ""): //code
# ... and rewrite links to stay within IV ...
@replace("^/", "https://t.me/iv?rhash=ca1d23e111bcad&url=https%3A%2F%2Fgrammy.dev%2F"): //a/@href
# ... as well as adding anchors ...
$subheader: //h2
$subheader+: //h3
$subheader+: //h4
$subheader+: //h5
$subheader+: //h6

@wrap_inner(<span>, "class", "header-text"): $subheader
@prepend(" "): //span[has-class("header-text")]

@before_el("./../self::span"): //a[has-class("header-anchor")]
@prepend("#"): $$
@set_attr(name, @href): $$

# ... and stripping leading hashes for anchor names ...
@replace("^#", ""): $$/@name

# We also fix prev/next links ...
@split_parent: //span[has-class("desc")]
@append(": "): $$
# ... and last updated ...

@set_attr("class", "last-updated-time"): //time
@append(@datetime): //time
@replace("T", " "): $$
@replace(".000Z", " UTC"): $$
@replace_tag(<span>): //time

# ... and remove sr content and line number blocks ...
@remove: //span[has-class("sr-only")]
@remove: //div[has-class("line-numbers")]
# ...and remove open in new window icon text
@remove: //span[has-class("external-link-icon-sr-only")]


# Convert tip, warning, danger blocks to details ...
@replace_tag(<details>): //div[has-class("tip")]
@set_attr(open, 1): $$
@replace_tag(<details>): //div[has-class("warning")]
@set_attr(open, 1): $$
@replace_tag(<details>): //div[has-class("danger")]
@set_attr(open, 1): $$
@replace_tag(<details>): //div[has-class("details")]
@set_attr(open, 0): $$

# ... and set their title as title of <details>.
@replace_tag(<summary>): //p[has-class("custom-block-title")]

# ... and adding data-language attribute to pre
@map( //div[span[has-class("lang")]] ) {
  $element: $@
  $class: $@/@class
  
  @set_attr("data-language", $class): $element//pre
 
  @replace("language-", ""): $$/@data-language
  @replace(" line-numbers-mode", ""): $$
}

# ... remove unnecesarry elements
@remove: //div[has-class("line-numbers-wrapper")]
@remove: //span[has-class("lang")]
@remove: //button[has-class("copy")]

# Then, we group code-block with their titles:
# TypeScript > Code, JavasScript > Code

@replace_tag(<details>): //div[has-class("blocks")]
@replace_tag(<summary>): //div[has-class("tabs")]/label

@detach: //details[has-class("blocks")]/div
@remove: //details[not(node() or normalize-space())]

@map( //details[has-class("blocks")] ) {
  $details: $@
  
  @prepend_to($details): (//div[@class="tabs"]/summary)[position()<2]
  
  @set_attr("is-active", @data-language): $details//pre
  @replace("^[a-z0-9]+ ", ""): $$/@is-active

  @if ($details//pre[@is-active="active"]) {
    @set_attr(open, 1): $details
  } 
}

@replace(" active", ""): //pre/@data-language

# Move <img> from <p> to outside ...
@split_parent: //p/img
# ...and change webp image extensions to jpeg
@replace(".webp", ".jpeg"): //img[ends-with(@src, ".webp")]/@src

# ... and apply bold titles for of <details>.
@wrap_inner(<b>): //summary
